const { Topic, LecturerTerm, Lecturer, Major, GroupLecturer, Term } = require('../models/index');
const Error = require('../helper/errors');
const { HTTP_STATUS } = require('../constants/constant');
const { QueryTypes } = require('sequelize');
const xlsx = require('xlsx');
const _ = require('lodash');
const { sequelize } = require('../configs/connectDB');
const { validationResult } = require('express-validator');

exports.getTopicOfSearch = async (req, res) => {
    try {
        const { termId, keywords = '', searchField, page = 1, limit = 10, sort } = req.query;

        const validLimit = _.toInteger(limit) > 0 ? _.toInteger(limit) : 10;
        const validPage = _.toInteger(page) > 0 ? _.toInteger(page) : 1;
        const offset = (validPage - 1) * validLimit;

        let searchQuery = '';
        let orderBy = '';
        let searchKey = `%${keywords}%`;

        if (searchField === 'lecturerName') {
            searchQuery = `AND l.full_name LIKE :keywords`;
            orderBy = `ORDER BY l.full_name ${sort.toUpperCase()}`;
        } else {
            searchQuery = `AND t.${searchField} LIKE :keywords`;
            orderBy = `ORDER BY t.${searchField} ${sort.toUpperCase()}`;
        }

        let topics = await sequelize.query(
            `SELECT t.id, t.key, t.name, t.status, t.quantity_group_max AS quantityGroupMax, l.full_name AS fullName, COUNT(gs.id) AS quantityGroup
            FROM topics t
            INNER JOIN lecturer_terms lt ON t.lecturer_term_id = lt.id
            INNER JOIN lecturers l ON lt.lecturer_id = l.id
            LEFT JOIN group_students gs ON t.id = gs.topic_id
            WHERE lt.term_id = :termId ${searchQuery}
            GROUP BY t.id, t.name, t.status, t.quantity_group_max, l.full_name
            ${orderBy}
            LIMIT :limit OFFSET :offset`,
            {
                replacements: {
                    termId,
                    keywords: searchKey,
                    limit: validLimit,
                    offset: offset,
                },
                type: QueryTypes.SELECT,
            },
        );

        const countResult = await sequelize.query(
            `SELECT COUNT(DISTINCT t.id) AS total
            FROM topics t
            INNER JOIN lecturer_terms lt ON t.lecturer_term_id = lt.id
            INNER JOIN lecturers l ON lt.lecturer_id = l.id
            WHERE lt.term_id = :termId ${searchQuery}`,
            {
                replacements: {
                    termId,
                    keywords: searchKey,
                },
                type: QueryTypes.SELECT,
            },
        );

        const total = countResult[0].total;
        const totalPage = _.ceil(total / validLimit);

        res.status(HTTP_STATUS.OK).json({
            success: true,
            message: 'L·∫•y danh s√°ch ƒë·ªÅ t√†i th√†nh c√¥ng!',
            topics,
            params: {
                page: validPage,
                limit: validLimit,
                totalPage,
            },
        });
    } catch (error) {
        console.log('üöÄ ~ getTopicOfSearch ~ error:', error);
        Error.sendError(res, error);
    }
};

exports.getTopicByLecturer = async (req, res) => {
    try {
        const { termId } = req.query;
        const { lecturerId } = req.params;

        let topics = null;
        topics = await sequelize.query(
            `SELECT t.id, t.key, t.name, t.status, t.quantity_group_max as quantityGroupMax, COUNT(gs.id) as quantityGroup FROM topics t
            INNER JOIN lecturer_terms lt ON t.lecturer_term_id = lt.id
            INNER JOIN lecturers l ON lt.lecturer_id = l.id
            LEFT JOIN group_students gs ON t.id = gs.topic_id
            WHERE lt.term_id = :termId AND lt.lecturer_id = :lecturerId
            GROUP BY t.id, t.key, t.name, t.status, t.quantity_group_max`,
            {
                replacements: {
                    termId,
                    lecturerId,
                },
                type: QueryTypes.SELECT,
            },
        );
        res.status(HTTP_STATUS.OK).json({
            success: true,
            message: 'Get Success',
            topics,
        });
    } catch (error) {
        console.log(error);
        Error.sendError(res, error);
    }
};

exports.getTopicApprovedOfSearch = async (req, res) => {
    try {
        const { termId, keywords, searchField, page, limit, sort } = req.query;
        const offset = (page - 1) * limit;
        let topics = [];

        let searchQuery = '';
        let orderBy = '';
        let searchKey = '';

        const allowedFields = ['lecturerName', 'name'];
        const allowedSorts = ['ASC', 'DESC'];

        if (!allowedFields.includes(searchField)) {
            return Error.sendNotFound(res, `ƒêi·ªÅu ki·ªán t√¨m ki·∫øm ${searchField} kh√¥ng h·ª£p l·ªá!`);
        }

        if (!allowedSorts.includes(sort.toUpperCase())) {
            return Error.sendNotFound(res, `ƒêi·ªÅu ki·ªán s·∫Øp x·∫øp ${searchField} kh√¥ng h·ª£p l·ªá!`);
        }

        if (searchField === 'lecturerName') {
            searchQuery = `AND l.full_name LIKE :keywords `;
            orderBy = `ORDER BY l.full_name ${sort}`;
            searchKey = `%${keywords}`;
        } else {
            searchQuery = `AND t.${searchField} LIKE :keywords `;
            orderBy = `ORDER BY t.${searchField} ${sort}`;
            searchKey = `%${keywords}%`;
        }

        topics = await sequelize.query(
            `SELECT t.id, t.key, t.name, t.status, t.quantity_group_max as quantityGroupMax, l.full_name as fullName, COUNT(gs.id) as quantityGroup
            FROM topics t
            INNER JOIN lecturer_terms lt ON t.lecturer_term_id = lt.id
            INNER JOIN lecturers l ON lt.lecturer_id = l.id
            LEFT JOIN group_students gs ON t.id = gs.topic_id
            WHERE lt.term_id = :termId AND t.status = :status ${searchQuery}
            GROUP BY t.id, t.key, t.name, t.status, t.quantity_group_max, l.full_name
            ${orderBy}
            LIMIT :limit OFFSET :offset`,
            {
                replacements: {
                    termId,
                    status: 'APPROVED',
                    keywords: searchKey,
                    limit: _.toInteger(limit),
                    offset: _.toInteger(offset),
                },
                type: QueryTypes.SELECT,
            },
        );

        const countResult = await sequelize.query(
            `SELECT COUNT(t.id) as total
            FROM topics t
            INNER JOIN lecturer_terms lt ON t.lecturer_term_id = lt.id
            INNER JOIN lecturers l ON lt.lecturer_id = l.id
            WHERE lt.term_id = :termId AND t.status = :status ${searchQuery}`,
            {
                replacements: {
                    termId,
                    status: 'APPROVED',
                    keywords: searchKey,
                },
                type: QueryTypes.SELECT,
            },
        );

        const total = countResult[0].total;

        const totalPage = _.ceil(total / _.toInteger(limit));

        res.status(HTTP_STATUS.OK).json({
            success: true,
            message: 'L·∫•y danh s√°ch ƒë·ªÅ t√†i th√†nh c√¥ng!',
            topics,
            params: {
                page: _.toInteger(page),
                limit: _.toInteger(limit),
                totalPage,
            },
        });
    } catch (error) {
        console.log(error);
        Error.sendError(res, error);
    }
};

exports.getTopicsByGroupLecturerId = async (req, res) => {
    try {
        const { id } = req.params;
        const groupLecturer = await GroupLecturer.findByPk(id);
        if (!groupLecturer) {
            return Error.sendNotFound(res, 'Nh√≥m gi·∫£ng vi√™n kh√¥ng t·ªìn t·∫°i!');
        }

        const topics = await sequelize.query(
            `SELECT t.id, t.key, t.name FROM assigns a
            INNER JOIN group_students gs ON a.group_student_id = gs.id
            INNER JOIN topics t ON gs.topic_id = t.id
            WHERE a.group_lecturer_id = :id`,
            {
                replacements: {
                    id,
                },
                type: QueryTypes.SELECT,
            },
        );

        const newTopics = topics.reduce((acc, topic) => {
            const { id, name } = topic;
            if (!acc[id]) {
                acc[id] = {
                    id,
                    name,
                };
            }

            return acc;
        }, {});

        res.status(HTTP_STATUS.OK).json({
            success: true,
            message: 'L·∫•y danh s√°ch ƒë·ªÅ t√†i th√†nh c√¥ng!',
            topics: Object.values(newTopics),
        });
    } catch (error) {
        console.log(error);
        Error.sendError(res, error);
    }
};

exports.getTopicById = async (req, res) => {
    try {
        const { id } = req.params;
        const topic = await Topic.findOne({
            where: {
                id,
            },
            include: {
                model: LecturerTerm,
                attributes: ['id'],
                include: {
                    model: Lecturer,
                    attributes: [
                        'id',
                        'userName',
                        'fullName',
                        'email',
                        'phone',
                        'gender',
                        'degree',
                    ],
                    include: {
                        model: Major,
                        attributes: ['id', 'name'],
                        as: 'major',
                    },
                    as: 'lecturer',
                },
                as: 'lecturerTerm',
            },
        });

        if (!topic) {
            return Error.sendNotFound(res, 'Topic not found');
        }
        res.status(HTTP_STATUS.OK).json({
            success: true,
            message: 'L·∫•y th√¥ng tin ƒë·ªÅ t√†i th√†nh c√¥ng!',
            topic,
        });
    } catch (error) {
        console.log(error);
        Error.sendError(res, error);
    }
};

exports.countTopicsByTermId = async (req, res) => {
    try {
        const { termId } = req.query;
        const count = await Topic.count({
            include: {
                model: LecturerTerm,
                where: {
                    term_id: termId,
                },
                as: 'lecturerTerm',
            },
        });

        res.status(HTTP_STATUS.OK).json({
            success: true,
            message: 'L·∫•y s·ªë l∆∞·ª£ng ƒë·ªÅ t√†i trong h·ªçc k·ª≥ th√†nh c√¥ng!',
            count,
        });
    } catch (error) {
        console.log(error);
        Error.sendError(res, error);
    }
};

exports.createTopic = async (req, res) => {
    try {
        const {
            name,
            description,
            quantityGroupMax,
            target,
            expectedResult,
            standardOutput,
            requireInput,
        } = req.body;

        const { termId } = req.query;

        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return Error.sendWarning(res, errors.array()[0].msg);
        }

        const lecturer_id = req.user.id;

        const lecturerTerm = await LecturerTerm.findOne({
            where: {
                lecturer_id: lecturer_id,
                term_id: termId,
            },
        });

        if (!lecturerTerm) {
            return Error.sendNotFound(res, 'Gi·∫£ng vi√™n kh√¥ng h·ª£p l·ªá trong h·ªçc k√¨ n√†y');
        }

        const existedTopic = await Topic.findOne({
            where: {
                name,
                lecturer_term_id: lecturerTerm.id,
            },
        });

        if (existedTopic) {
            return Error.sendConflict(res, 'T√™n ƒë·ªÅ t√†i ƒë√£ t·ªìn t·∫°i!');
        }

        const topics = await sequelize.query(
            `SELECT count(t.id) as total 
            FROM topics t
            INNER JOIN lecturer_terms lt ON t.lecturer_term_id = lt.id
            WHERE lt.term_id = :termId`,
            {
                replacements: {
                    termId,
                },
                type: QueryTypes.SELECT,
            },
        );

        const numberOfDigits = topics[0].total.toString().length;
        const key = `#${(topics[0].total + 1).toString().padStart(numberOfDigits, '0')}`;

        const topic = await Topic.create({
            key,
            name,
            description,
            quantityGroupMax,
            target,
            expectedResult,
            standardOutput,
            requireInput,
            lecturer_term_id: lecturerTerm.id,
        });

        res.status(HTTP_STATUS.CREATED).json({
            success: true,
            message: 'T·∫°o ƒë·ªÅ t√†i th√†nh c√¥ng!',
            topic,
        });
    } catch (error) {
        console.log(error);
        Error.sendError(res, error);
    }
};

exports.updateTopic = async (req, res) => {
    try {
        const { id } = req.params;
        const {
            name,
            description,
            target,
            expectedResult,
            standardOutput,
            quantityGroupMax,
            requireInput,
        } = req.body;

        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return Error.sendWarning(res, errors.array()[0].msg);
        }

        const topic = await Topic.findByPk(id);
        if (!topic) {
            return Error.sendNotFound(res, 'ƒê·ªÅ t√†i kh√¥ng t·ªìn t·∫°i!');
        }
        topic.name = name;
        topic.description = description;
        topic.target = target;
        topic.expectedResult = expectedResult;
        topic.standardOutput = standardOutput;
        topic.requireInput = requireInput;
        topic.quantityGroupMax = quantityGroupMax;

        await topic.save();

        res.status(HTTP_STATUS.OK).json({
            success: true,
            message: 'C·∫≠p nh·∫≠t th√†nh c√¥ng!',
            topic,
        });
    } catch (error) {
        console.log(error);
        Error.sendError(res, error);
    }
};

exports.updateQuantityGroupMax = async (req, res) => {
    try {
        const { termId } = req.query;
        const { quantityGroupMax } = req.body;

        const query = `UPDATE topics t
        JOIN lecturer_terms lt ON t.lecturer_term_id = lt.id
        SET t.quantity_group_max = :quantityGroupMax
        WHERE lt.term_id = :termId`;

        await sequelize.query(query, {
            type: QueryTypes.BULKUPDATE,
            replacements: {
                quantityGroupMax: quantityGroupMax,
                termId: termId,
            },
        });

        res.status(HTTP_STATUS.OK).json({
            success: true,
            message: 'C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th√†nh c√¥ng!',
        });
    } catch (error) {
        console.log(error);
        Error.sendError(res, error);
    }
};

exports.importTopics = async (req, res) => {
    try {
        const { termId } = req.body;
        if (!req.file) {
            return Error.sendWarning(res, 'Vui l√≤ng ch·ªçn file t·∫£i l√™n');
        }
        const workbook = xlsx.read(req.file.buffer, { type: 'buffer' });
        const sheetName = workbook.SheetNames[0];
        const sheet = workbook.Sheets[sheetName];
        const jsonData = xlsx.utils.sheet_to_json(sheet);

        let listTopic = [];
        for (const topic of jsonData) {
            if (
                !topic['M√£ gi·∫£ng vi√™n'] ||
                !topic['T√™n ƒë·ªÅ t√†i'] ||
                !topic['M·ª•c ti√™u ƒë·ªÅ t√†i'] ||
                !topic['D·ª± ki·∫øn s·∫£n ph·∫©m nghi√™n c·ª©u c·ªßa ƒë·ªÅ t√†i v√† kh·∫£ nƒÉng ·ª©ng d·ª•ng'] ||
                !topic['M√¥ t·∫£'] ||
                !topic['Y√™u c·∫ßu ƒë·∫ßu v√†o'] ||
                !topic['Y√™u c·∫ßu ƒë·∫ßu ra']
            ) {
                return Error.sendWarning(
                    res,
                    'File kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng! B·∫°n h√£y ki·ªÉm tra l·∫°i t√™n c·ªôt trong file excel.',
                );
            }

            const username = topic['M√£ gi·∫£ng vi√™n'].trim();
            const name = topic['T√™n ƒë·ªÅ t√†i'].trim();
            const target = topic['M·ª•c ti√™u ƒë·ªÅ t√†i'].trim();
            const expectedResult =
                topic['D·ª± ki·∫øn s·∫£n ph·∫©m nghi√™n c·ª©u c·ªßa ƒë·ªÅ t√†i v√† kh·∫£ nƒÉng ·ª©ng d·ª•ng'].trim();
            const description = topic['M√¥ t·∫£'].trim();
            const requireInput = topic['Y√™u c·∫ßu ƒë·∫ßu v√†o'].trim();
            const standardOutput = topic['Y√™u c·∫ßu ƒë·∫ßu ra'].trim();

            let topicToSaved = {
                username: username,
                name: name,
                target: target,
                expectedResult: expectedResult,
                description: description,
                requireInput: requireInput,
                standardOutput: standardOutput,
            };
            const lecturer = await Lecturer.findOne({
                where: {
                    username: username,
                },
                attributes: ['id'],
            });

            if (!lecturer) {
                return Error.sendNotFound(res, `Gi·∫£ng vi√™n c√≥ m√£ ${username} kh√¥ng t·ªìn t·∫°i.`);
            }

            const isExistLecturer = await LecturerTerm.findOne({
                where: {
                    lecturer_id: lecturer.id,
                    term_id: termId,
                },
                attributes: ['id'],
            });

            if (!isExistLecturer) {
                return Error.sendNotFound(
                    res,
                    `M√£ gi·∫£ng vi√™n ${username} kh√¥ng t·ªìn t·∫°i trong k·ª≥ n√†y.`,
                );
            }

            const existedTopic = await Topic.findOne({
                where: {
                    name: name,
                    lecturer_term_id: isExistLecturer.id,
                },
            });

            if (existedTopic) {
                return Error.sendConflict(res, `T√™n ƒë·ªÅ t√†i ${name} ƒë√£ t·ªìn t·∫°i.`);
            }

            topicToSaved.lecturerTermId = isExistLecturer.id;
            listTopic.push(topicToSaved);
        }

        const topics = await sequelize.query(
            `SELECT count(t.id) as total 
            FROM topics t
            INNER JOIN lecturer_terms lt ON t.lecturer_term_id = lt.id
            WHERE lt.term_id = :termId`,
            {
                replacements: {
                    termId,
                },
                type: QueryTypes.SELECT,
            },
        );

        const numberOfDigits = topics[0].total.toString().length;

        for (let i = 0; i < listTopic.length; i++) {
            const key = `#${(i + 2).toString().padStart(numberOfDigits, '0')}`;
            const {
                name,
                description,
                target,
                expectedResult,
                standardOutput,
                requireInput,
                lecturerTermId,
            } = listTopic[i];

            await Topic.create({
                key,
                name,
                description,
                quantityGroupMax: 2,
                target,
                expectedResult,
                standardOutput,
                requireInput,
                lecturer_term_id: lecturerTermId,
            });
        }

        res.status(HTTP_STATUS.OK).json({
            success: true,
            message: 'Import danh s√°ch ƒë·ªÅ t√†i th√†nh c√¥ng!',
        });
    } catch (error) {
        console.log(error);
        Error.sendError(res, error);
    }
};

exports.exportTopics = async (req, res) => {
    try {
        const { termId } = req.query;

        if (!termId) {
            return Error.sendWarning(res, 'H√£y ch·ªçn h·ªçc k√¨!');
        }

        const term = await Term.findByPk(termId);
        if (!term) {
            return Error.sendNotFound(res, 'H·ªçc k√¨ kh√¥ng t·ªìn t·∫°i!');
        }

        // collumns: M√£ GV, T√™n GV, T√™n ƒë·ªÅ t√†i, M√¥ t·∫£, M·ª•c ti√™u ƒë·ªÅ t√†i, D·ª± ki·∫øn s·∫£n ph·∫©m nghi√™n c·ª©u c·ªßa ƒë·ªÅ t√†i v√† kh·∫£ nƒÉng ·ª©ng d·ª•ng, Y√™u c·∫ßu ƒë·∫ßu v√†o, Y√™u c·∫ßu ƒë·∫ßu ra
        let topics = await sequelize.query(
            `SELECT l.username as 'M√£ GV', l.full_name as 'T√™n GV', t.name as 'T√™n ƒë·ªÅ t√†i', t.description as 'M√¥ t·∫£', t.target as 'M·ª§C TI√äU ƒê·ªÄ T√ÄI', t.expected_result as 'D·ª∞ KI·∫æN S·∫¢N PH·∫®M NGHI√äN C·ª®U C·ª¶A ƒê·ªÄ T√ÄI V√Ä KH·∫¢ NƒÇNG ·ª®NG D·ª§NG', t.require_input as 'Y√™u c·∫ßu ƒë·∫ßu v√†o', t.standard_output as 'Y√™u c·∫ßu ƒë·∫ßu ra'
            FROM topics t
            INNER JOIN lecturer_terms lt ON t.lecturer_term_id = lt.id
            INNER JOIN lecturers l ON lt.lecturer_id = l.id
            WHERE lt.term_id = :termId`,
            {
                replacements: {
                    termId,
                },
                type: QueryTypes.SELECT,
            },
        );

        for (let i = 0; i < topics.length; i++) {
            topics[i]['STT'] = i + 1;
        }

        res.status(HTTP_STATUS.OK).json({
            success: true,
            message: 'Xu·∫•t danh s√°ch ƒë·ªÅ t√†i th√†nh c√¥ng!',
            topics,
        });
    } catch (error) {
        console.log(error);
        Error.sendError(res, error);
    }
};

exports.importTopicsFromTermIdToSelectedTermId = async (req, res) => {
    try {
        const { termId, selectedTermId } = req.body;

        if (termId === selectedTermId) {
            return Error.sendWarning(res, 'H·ªçc k√¨ ƒë∆∞·ª£c ch·ªçn ph·∫£i kh√°c h·ªçc k·ª≥ hi·ªán t·∫°i!');
        }

        const lecturersSelected = await LecturerTerm.findAll({
            where: { term_id: selectedTermId },
            attributes: ['lecturer_id'],
        });

        if (!lecturersSelected.length) {
            return Error.sendNotFound(res, 'Kh√¥ng t√¨m th·∫•y gi·∫£ng vi√™n trong h·ªçc k√¨ ƒë∆∞·ª£c ch·ªçn!');
        }

        const lecturers = await LecturerTerm.findAll({
            where: { term_id: termId },
            attributes: ['lecturer_id'],
        });

        if (!lecturers.length) {
            return Error.sendNotFound(res, 'Kh√¥ng t√¨m th·∫•y gi·∫£ng vi√™n trong h·ªçc k√¨ hi·ªán t·∫°i!');
        }

        const lecturersArr = lecturers.map((lecturer) => lecturer.lecturer_id);
        const lecturersSelectedArr = lecturersSelected.map((lecturer) => lecturer.lecturer_id);
        const newLecturersArr = lecturersArr.filter(
            (lecturer) => !lecturersSelectedArr.includes(lecturer),
        );

        const processLecturerTopics = async (lecturerId) => {
            const lecturerTerm = await LecturerTerm.findOne({
                where: { term_id: termId, lecturer_id: lecturerId },
            });

            const lecturerTermSelected = await LecturerTerm.findOne({
                where: { term_id: selectedTermId, lecturer_id: lecturerId },
            });

            const topics = await Topic.findAll({
                where: { lecturer_term_id: lecturerTerm.id },
            });

            for (const topic of topics) {
                await Topic.create({
                    name: topic.name,
                    description: topic.description,
                    quantityGroupMax: topic.quantityGroupMax,
                    target: topic.target,
                    expectedResult: topic.expectedResult,
                    standardOutput: topic.standardOutput,
                    requireInput: topic.requireInput,
                    lecturer_term_id: lecturerTermSelected.id,
                });
            }
        };

        const lecturersToProcess = newLecturersArr.length ? newLecturersArr : lecturersArr;
        for (const lecturerId of lecturersToProcess) {
            await processLecturerTopics(lecturerId);
        }

        res.status(HTTP_STATUS.OK).json({
            success: true,
            message: 'Import danh s√°ch ƒë·ªÅ t√†i th√†nh c√¥ng!',
        });
    } catch (error) {
        console.error(error);
        Error.sendError(res, error);
    }
};

exports.updateStatusTopic = async (req, res) => {
    try {
        const { id } = req.params;
        const { status, note } = req.body;
        const topic = await Topic.findByPk(id);
        if (!topic) {
            return Error.sendNotFound(res, 'ƒê·ªÅ t√†i kh√¥ng t·ªìn t·∫°i!');
        }
        topic.status = status;
        topic.note = note;
        await topic.save();

        res.status(HTTP_STATUS.OK).json({
            success: true,
            message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng!',
        });
    } catch (error) {
        console.log(error);
        Error.sendError(res, error);
    }
};

exports.deleteTopic = async (req, res) => {
    try {
        const { id } = req.params;
        const topic = await Topic.findByPk(id);
        if (!topic) {
            return Error.sendNotFound(res, 'ƒê·ªÅ t√†i kh√¥ng t·ªìn t·∫°i!');
        }
        await topic.destroy();
        res.status(HTTP_STATUS.OK).json({
            success: true,
            message: 'Xo√° th√†nh c√¥ng!',
        });
    } catch (error) {
        console.log(error);
        Error.sendError(res, error);
    }
};
